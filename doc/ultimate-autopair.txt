*ultimate-autopair.nvim* The ultimate-autopair plugin
==============================================================================
SETUP                                                *ultimate-autopair-SETUP*
------------------------------------------------------------------------------
setup-system                                *ultimate-autopair-setup-system*
Here are the list of functions which gets return by `require'ultimate-autopair'`.
 *ultimate-autopair-setup*
`ua.setup(conf?)` checks version and runs `ua.init({ua.extend_default(conf)})`.
 *ultimate-autopair-init*
`ua.init(confs)` (clears and) initializes the plugin with configs from `confs`.
  {NOTE}: it doesn't check for version.
 *ultimate-autopair-clear*
`ua.clear()` clears the mappings and autocmds.
 *ultimate-autopair-list*
`ua.list()` list the values from mem (mem contains: pairs,mappings,autocmds)
 *ultimate-autopair-toggle*
`ua.toggle()` toggle the maps/autocmds, does not delete.
 *ultimate-autopair-disable*
`ua.disable()` disables the maps/autocmds, does not delete.
 *ultimate-autopair-enable*
`ua.enable()` enables the maps/autocmds.
 *ultimate-autopair-isenabled*
`ua.isenabled()` returns a boolean value of whether UA is enabled.
 *ultimate-autopair-extend-default*
`ua.extend_default(conf)` extends `conf` with the default config.
------------------------------------------------------------------------------
config                                              *ultimate-autopair-config*
{NOTE}: if looking for the default config: |ultimate-autopair-default-config|
UA has a unique and complicated configuration system: it supports multiple
configuration at the same time, with each configuration having its own
profile. |ultimate-autopair-prof|
A config may be a table which must have a key called `profile` containing the
profile, or be a function (which internally has the profile `_function`).
==============================================================================
PROFILE                                               *ultimate-autopair-prof*
The built-in profiles are:
    default: The default pair profile |ultimate-autopair-prof-default|
    cond: Add condition to any profile |ultimate-autopair-prof-cond|
    map: Creates mappings |ultimate-autopair-prof-map|
    raw: Inserts modules directly into the system |ultimate-autopair-prof-raw|
    multi: Init a list of configs |ultimate-autopair-prof-multi|
------------------------------------------------------------------------------
prof-cond                                        *ultimate-autopair-prof-cond*
The cond profile takes a list of configs and the keys `check` and or
`filter`. If `check` is nil, `filter` is used as `check`. Inserts `check`
and `filter` into the table of configs returning modules.
Example: >lua
 table.insert(ua.configs,{
     profile='cond',
     rule=function () return vim.o.filetype=='lua' end,
     check=function (o) return not vim.startswith(o.line,'@') end,
     {profile='map',{'i','(','()<Left>'}},
     {profile='map',{'i','"','""<Left>'}},
 })
------------------------------------------------------------------------------
prof-map                                          *ultimate-autopair-prof-map*
The map profile takes a list of `{mode,lhs,rhs}` and creates mappings out of
them. {NOTE}: `mode` must be in `ua.core.modes` (`i` or `c`).
Example: >lua
 table.insert(ua.configs,{
     profile='map',
     {'i','(','()'},
     {{'i','c'},')',function(o,m) return o.linenr end,p=20},
 })
------------------------------------------------------------------------------
prof-raw                                          *ultimate-autopair-prof-raw*
The raw profile  takes a list of `modules` and directly inserts them into
the system.
Example: >lua
 table.insert(ua.configs,{
   profile='raw',
   {
     check=function(o) return o.key=='(' and not o.incmd and '()' end,
     get_map=function(mode) return mode=='i' and {'('} end,
     filter=function(o) return not o.incmd end,
     p=10,
   },
 })
<
------------------------------------------------------------------------------
prof-multi                                       *ultimate-autopair-prof-multi*
The multi profile takes a list of configs and inits them.
Example: >lua
 table.insert(ua.configs,{
     profile='multi',
     config_1,
     config_2,
 })
<
------------------------------------------------------------------------------
prof-default                                  *ultimate-autopair-prof-default*
The default profile is the default pair profile.
Options can be found at: |ultimate-autopair-default-config|
==============================================================================
DEFAULT CONFIG                              *ultimate-autopair-default-config*
The default configuration contains a loot of options, here are those:
>lua
 M.conf={
   profile='default',
   --what profile to use
   map=true,
   --whether to allow any insert map
   cmap=true, --cmap stands for cmd-line map
   --whether to allow any cmd-line map
   pair_map=true,
   --whether to allow pair insert map
   pair_cmap=true,
   --whether to allow pair cmd-line map
   multiline=true,
   --enable/disable multiline
   bs={-- *ultimate-autopair-map-backspace-config*
     enable=true,
     map='<bs>', --string or table
     cmap='<bs>', --string or table
     overjumps=true,
     --(|foo) > bs > |foo
     space=true, --false, true or 'balance'
     --( |foo ) > bs > (|foo)
     --balance:
     --  Will prioritize balanced spaces
     --  ( |foo  ) > bs > ( |foo )
     indent_ignore=false,
     --(\n\t|\n) > bs > (|)
     single_delete=false,
     -- <!--|--> > bs > <!-|
     conf={},
     --contains extension config
     multi=false,
     --use multiple configs (|ultimate-autopair-map-multi-config|)
   },
   cr={-- *ultimate-autopair-map-newline-config*
     enable=true,
     map='<cr>', --string or table
     autoclose=false,
     --(| > cr > (\n|\n)
     --addsemi={}, --list of filetypes
     conf={},
     --contains extension config
     multi=false,
     --use multiple configs (|ultimate-autopair-map-multi-config|)
   },
   space={-- *ultimate-autopair-map-space-config*
     enable=true,
     map=' ', --string or table
     cmap=' ', --string or table
     check_box_ft={'markdown','vimwiki'},
     --+ [|] > space > + [ ]
     conf={},
     --contains extension config
     multi=false,
     --use multiple configs (|ultimate-autopair-map-multi-config|)
   },
   space2={-- *ultimate-autopair-map-space2-config*
     enable=false,
     match=[[\k]],
     --what character activate
     conf={},
     --contains extension config
     multi=false,
     --use multiple configs (|ultimate-autopair-map-multi-config|)
   },
   fastwarp={-- *ultimate-autopair-map-fastwarp-config*
     enable=true,
     enable_normal=true,
     enable_reverse=true,
     hopout=false,
     --{(|)} > fastwarp > {(}|)
     map='<A-e>', --string or table
     rmap='<A-E>', --string or table
     cmap='<A-e>', --string or table
     rcmap='<A-E>', --string or table
     multiline=true,
     --(|) > fastwarp > (\n|)
     nocursormove=true,
     --makes the cursor not move (|)foo > fastwarp > (|foo)
     --disables multiline feature
     --only activates if prev char is start pair, otherwise fallback to normal
     do_nothing_if_fail=true,
     --add a module so that if fastwarp fails
     --then an `e` will not be inserted
     no_filter_nodes={'string','raw_string'},
     --which nodes to skip for tsnode filtering
     faster=false,
     --only do jump over pair/goto end/goto next line
     --useful for the situation of:
     --{|}M.foo('bar') > {M.foo('bar')|}
     conf={},
     --contains extension config
     multi=false,
     --use multiple configs (|ultimate-autopair-map-multi-config|)
   },
   close={-- *ultimate-autopair-map-close-config*
     enable=true,
     map='<A-)>', --string or table
     cmap='<A-)>', --string or table
     conf={},
     --contains extension config
     multi=false,
     --use multiple configs (|ultimate-autopair-map-multi-config|)
     do_nothing_if_fail=true,
     --add a module so that if close fails
     --then a `)` will not be inserted
   },
   tabout={-- *ultimate-autopair-map-tabout-config*
     enable=false,
     map='<A-tab>', --string or table
     cmap='<A-tab>', --string or table
     conf={},
     --contains extension config
     multi=false,
     --use multiple configs (|ultimate-autopair-map-multi-config|)
     hopout=false,
     -- (|) > tabout > ()|
     do_nothing_if_fail=true,
     --add a module so that if close fails
     --then a `\t` will not be inserted
   },
   extensions={-- *ultimate-autopair-extensions-default-config*
     cmdtype={skip={'/','?','@','-'},p=100},
     filetype={p=90,nft={'TelescopePrompt'},tree=true},
     escape={filter=true,p=80},
     utf8={p=70},
     tsnode={p=60,separate={'comment','string','raw_string'},--[[tree=true,notree={'markdown_inline'}]]},
     cond={p=40,filter=true},
     alpha={p=30,filter=false,all=false},
     suround={p=20},
     fly={other_char={' '},nofilter=false,p=10,undomapconf={},undomap=nil,undocmap=nil,only_jump_end_pair=false},
   },
   internal_pairs={-- *ultimate-autopair-pairs-default-pairs*
     {'[',']',fly=true,dosuround=true,newline=true,space=true},
     {'(',')',fly=true,dosuround=true,newline=true,space=true},
     {'{','}',fly=true,dosuround=true,newline=true,space=true},
     {'"','"',suround=true,multiline=false,alpha={'txt'}},
     {"'","'",suround=true,cond=function(fn) return not fn.in_lisp() or fn.in_string() end,alpha=true,nft={'tex'},multiline=false},
     {'`','`',nft={'tex'},multiline=false},
     {'``',"''",ft={'tex'}},
     {'```','```',newline=true,ft={'markdown'}},
     {'<!--','-->',ft={'markdown','html'}},
     {'"""','"""',newline=true,ft={'python'}},
     {"'''","'''",newline=true,ft={'python'}},
   },
   config_internal_pairs={-- *ultimate-autopair-pairs-configure-default-pairs*
     --configure internal pairs
     --example:
     --{'{','}',suround=true},
   },
 }
<
==============================================================================
workings                                           *ultimate-autopair-workings
------------------------------------------------------------------------------
start-pair-insertion              *ultimate-autopair-add-start-pair-insertion*
When inserting start pair, then if there is not already a corresponding end
pair in the line, then insert an end pair.
Example (`*` is cursor): >
 | before | keys | after |
 | *      | (    | (*)   |
 | *      | ((   | ((*)) |
 | *)     | (    | (*)   |
 | (*))   | (    | ((*)) |
<
------------------------------------------------------------------------------
end-pair-insertion                      *ultimate-autopair-end-pair-insertion*
When inserting end pair and next is end pair, then if there is a corresponding
start pair in the line, then hop over the end pair.
Example (`*` is cursor): >
 | before | keys | after |
 | (*)    | )    | ()*   |
 | (*     | )    | ()*   |
 | ((*)   | )    | (()*) |
 | (*))   | )    | ()*)  |
<
------------------------------------------------------------------------------
ambiguous-pair-insertion          *ultimate-autopair-ambiguous-pair-insertion*
When inserting ambiguous pair, if the next is ambiguous pair which has a
corresponding pair then hop over, otherwise if there's not already a
corresponding pair on the line then insert the ambiguous pair double
Example (`*` is cursor): >
 | before | keys | after   |
 | *      | '    | '*'     |
 | '*     | '    | ''*     |
 | *'     | '    | '*'     |
 | '*'    | '    | ''*     |
 | ' * '  | '    | ' '*' ' |
 | ''*''  | '    | '''*''' |
<
------------------------------------------------------------------------------
filter                                              *ultimate-autopair-filter*
Filter is used for filtering pairs/other characters, it will run for every
pair to check conditions, like if prev char is not `\\`.
------------------------------------------------------------------------------
multiline                                        *ultimate-autopair-multiline*
Multiline works pretty simply, it gets the whole buffer (to a maximum of 1000
lines) and that is used for the plugin.
==============================================================================
MAP                                                    *ultimate-autopair-map*
------------------------------------------------------------------------------
map-backspace                                *ultimate-autopair-map-backspace*
Behaves like you would expect an autopair backspace to behave.
For configuration options see: |ultimate-autopair-map-backspace-config|
Example (`*` is cursor): >
 | before    | after    | config             |
 |-----------+----------+--------------------|
 | (*)       | *        |                    |
 | ((*)      | (*)      |                    |
 | {\n*\n}   | {*}      |                    |
 | (*foo)    | *foo     | overjum            |
 | ( * )     | (*)      | space              |
 | ( *foo )  | (*foo)   | space              |
 | (  *foo ) | ( *foo ) | space              |
 | ( *foo  ) | ( *foo ) | space='balance'    |
 | <!--*-->  | <!-*     | single_delete=true |
 | {\n\t*\n} | {*}      |indent_ignore=true  |
<
------------------------------------------------------------------------------
map-newline                                    *ultimate-autopair-map-newline*
Behaves like you would expect an autopair newline to behave.
For configuration options see: |ultimate-autopair-map-newline-config|
Example (`*` is cursor and `\t` is tab): >
 | before | after  | config    |
 |--------+--------+-----------|
 | {*}    | {      |           |
 |        | \t*    |           |
 |        | }      |           |
 |--------+--------+-----------|
 | {*     | {      | autoclose |
 |        | \t*    |           |
 |        | }      |           |
 |--------+--------+-----------|
 | {foo*} | {foo   |           |
 |        | \t*    |           |
 |        | }      |           |
 |--------+--------+-----------|
 | {*foo} | {      |           |
 |        | \t*foo |           |
 |        | }      |           |
<
------------------------------------------------------------------------------
space                                                *ultimate-autopair-space*
Behaves like you would expect an autopair space to behave.
For configuration options see: |ultimate-autopair-map-space-config|
Example (`*` is cursor): >
 | before | after    | config                |
 |--------+----------+-----------------------|
 | (*)    | ( * )    |                       |
 | ( * )  | (  *  )  |                       |
 | (*foo) | ( *foo ) |                       |
 | + [*]  | + [ *]   | check_box_ft={'text'} |
<
------------------------------------------------------------------------------
space2                                              *ultimate-autopair-space2*
Auto balances spaces when input char matches `match`.
For configuration options see: |ultimate-autopair-map-space2-config|
Example (`*` is cursor): >
 | before | inp | after    |
 |--------+-----+----------|
 | ( *)   | f   | ( f* )   |
 | (  *)  | f   | (  f*  ) |
 | ( * )  | f   | ( f* )   |
 | ( *oo) | f   | ( f*oo ) |
<
------------------------------------------------------------------------------
fastwarp                                          *ultimate-autopair-fastwarp*
The fastwarp mapping fast warp (not wraps) the next end pair.
For configuration options see: |ultimate-autopair-map-fastwarp-config|
Example (`*` is cursor): >
 | before     | after      |
 |------------+------------|
 | (*){}      | ({}*)      |
 | (*){foo}   | ({foo}*)   |
 | (*)foo     | (foo*)     |
 | (foo*),bar | (foo,bar*) |
< Example (`*` is cursor)(nocursormove=true): >
 | before     | after      |
 |------------+------------|
 | (*){}      | (*{})      |
 | (*){foo}   | (*{foo})   |
 | (*)foo     | (*foo)     |
 | (foo*),bar | (foo,bar*) | (fallback to cursormove)
<
------------------------------------------------------------------------------
rfastwarp                                        *ultimate-autopair-rfastwarp*
The rfastwarp mapping is designed to do the opposite of fastwarp.
For configuration options see: |ultimate-autopair-map-fastwarp-config|
------------------------------------------------------------------------------
close                                                *ultimate-autopair-close*
The close mapping closes opened pairs.
For configuration options see: |ultimate-autopair-map-close-config|
Example (`*` is cursor): >
 | before | after |
 |--------+-------|
 | (*     | (*)   |
 | ({*    | ({*}) |
 | (*)    | (*)   |
 | "*     | "*"   |
<
------------------------------------------------------------------------------
map-tabout                                      *ultimate-autopair-map-tabout*
The tabout mapping allows you to jump to end (or out) of pairs.
For configuration options see: |ultimate-autopair-map-tabout-config|
Example (`*` is cursor): >
 | before | after  | config |
 |--------+--------+--------|
 | (f*oo) | (foo*) |        |
 | (*[])  | ([]*)  |        |
 | (*)    | ()*    | hopout |
<
------------------------------------------------------------------------------
map-multi-config                          *ultimate-autopair-map-multi-config*
In each map, you can set `multi` to `true` to have multiple configs at the
same time. Each indexed item (`ipairs`) in the config gets extended with the
root config, and passed to respective module.
Example: >lua
 {
     fastwarp={
         multi=true,
         p=20, --all sub-configs get default value p=20, unless specified
         {map='<A-e>',nocursormove=true},
         {map='<A-f>',nocursormove=false},
     }
 }
<
==============================================================================
EXTENSIONS                                      *ultimate-autopair-extensions*
All extensions should be in the `extensions` directory.
For default configuration see: |ultimate-autopair-extensions-default-config|
Every extension has a `p` flag which denotes its priority.
Note that almost every option may also be a function.
------------------------------------------------------------------------------
ext-alpha                                        *ultimate-autopair-ext-alpha*
This extension allows for disabling pairs before and after alpha
Extension config:
{alpha} `string[]|boolean`: Weather to check for alpha before
  and if `string[]` then for which filetypes.
{after} `string[]|boolean`: Weather to check for alpha after
  and if `string[]` then for which filetypes.
{filter} `boolean`: Weather to filter (|ultimate-autopair-filter|)
{all} `boolean`: Weather to check for all in-characters, not just start pairs.
{no_python}: Weather to disable f-string detection.
Extension pair-config:
{alpha} `string[]|boolean`: Weather to check for alpha before
  and if `string[]` then for which filetypes.
{alpha_after} `string[]|boolean`: Weather to check for alpha after
  and if `string[]` then for which filetypes.
------------------------------------------------------------------------------
ext-cmdtype                                    *ultimate-autopair-ext-cmdtype*
This extension allows for disabling in specific cmdline-types
Extension config:
{skip} `string[]`: Which cmdtypes to skip `:h getcmdtype()`
Extension pair-config:
{skipcmdtype} `string[]`: Which cmdtypes to skip `:h getcmdtype()`
------------------------------------------------------------------------------
ext-cond                                          *ultimate-autopair-ext-cond*
This extension allows for creating conditions
Extension config:
{cond} `function|function[]`: List of functions to run
{filter} `boolean`: Weather to filter (|ultimate-autopair-filter|)
Extension pair-config:
{cond} `function|function[]`: List of functions to run
For the arguments of the function, pleas refer to source code
`lua/ultimate-autopair/extension/cond.lua` for info (until doc is written).
------------------------------------------------------------------------------
ext-escape                                      *ultimate-autopair-ext-escape*
This extension allows for checking for escaped pairs
Extension config:
{filter} `boolean`: Weather to filter (|ultimate-autopair-filter|)
Extension pair-config:
{noescape} `boolean`: Weather to disable escape
------------------------------------------------------------------------------
ext-filetype                                  *ultimate-autopair-ext-filetype*
This extensions allows fire filetype checking (including injected langs).
Extension config:
{ft} `string[]`: Which filetypes to enable
{nft} `string[]`: Which filetypes to disable
{tree} `boolean`: Weather to use treesitter injected lang detection
Extension pair-config:
{ft} `string[]`: Which filetypes to enable
{nft} `string[]`: Which filetypes to disable
------------------------------------------------------------------------------
ext-fly                                            *ultimate-autopair-ext-fly*
This extensions allows for hopping list of end-pairs (+ other chars)
Example (`*` is cursor) (default config): >
 | before   | key | after    | config                   |
 |----------+-----+----------+--------------------------|
 | ({[*] }) | )   | ({[] })* |                          |
 | *()      | )   | ()*      | only_jump_end_pair=false |
<
Extension config:
{nofilter} `boolean`: Weather to disable filtering (for string quote)
{only_jump_end_pair} `boolean`: Weather to only jump end pair
{other_char} `string[]`: What other chars to jump
{undomap} `string|string[]`: Create an undo map
{undocmap} `string|string[]`: Create an undo map for cmdline
{undomapconf} `table`: Undo map conf
Extension pair-config:
{fly} `boolean`: Weather a pair can fly/be flown over
------------------------------------------------------------------------------
ultimate-autopair-ext-suround                  *ultimate-autopair-ext-suround*
This extension allows for to surround pairs
Example (`*` is cursor): >
 | before | key | after  |
 |--------+-----+--------|
 | *'a'   | (   | (*'a') |
<
Extension pair-config:
{dosurround} `boolean`: Weather to do surround
{surround} `boolean`: Weather to be allowed to be surrounded
------------------------------------------------------------------------------
ultimate-autopair-ext-tsnode                    *ultimate-autopair-ext-tsnode*
This extension allows for to filers tsnodes (|ultimate-autopair-filter|)
If in a specified tsnode, then filter outside the node
and if outside of any specified tsnode, then filter inside tsnodes
Extension config:
{separate} `string[]`: List of node types to separate
------------------------------------------------------------------------------
ultimate-autopair-ext-utf8                        *ultimate-autopair-ext-utf8*
This extension replaces UTF-8 chars with ASCII counterparts.
Extension config:
{map} `table<string|true,string>`: A regex map for defining which utf8 chars
  go to which char, or `true` to denotes default value
==============================================================================
OTHER                                                *ultimate-autopair-other*
------------------------------------------------------------------------------
debug                                                *ultimate-autopair-debug*
Ultimate-autopair has a few scripts to run debug. The first one is `ua._list`
which will allow you to select wanted pair and see information about sed pair.
The second one is `debug` which automatically activates when a mapping throws
an error.
------------------------------------------------------------------------------
test                                                  *ultimate-autopair-test*
The test file sits in the `test` directory. You can run the test by sourcing
it with neovim or by running `:checkhealth ultimate-autopair`. Set values
`_G.UA_DEV=true` for dev testing (and `_G.UA_DEV='ok'` to also report OKs).
------------------------------------------------------------------------------
notes                                                *ultimate-autopair-notes*
The root directory `notes` contains notes and scribbles about the plugin.
------------------------------------------------------------------------------
experimental                                  *ultimate-autopair-experimental*
`experimental` directory contains experimental features.
------------------------------------------------------------------------------
use-with-npairs                            *ultimate-autopair-use-with-npairs*
This is about how to use UA with https://github.com/windwp/nvim-autopairs
Currently, there's not yet a profile for npairs, so you'll have to do with
using one or the other with no fallback to other.
So the only way to use them side by side is to disable specific features.
Most disables are self explanatory, but disabling npairs pair insert is
complicated: the only way is to set all `rules.key_map` to `nil`: >lua
 for _,i in ipairs(npairs.config.rules) do
   i.key_map=nil
 end
<
Note that if you add rules after this, then they won't be disabled.
==============================================================================
WRITING-EXTENSIONS                      *ultimate-autopair-writing-extensions*
Todo: write documentation
==============================================================================
WRITING-PROFILE                             *ultimate-autopair-writing-prilfe*
Todo: write documentation
==============================================================================
GUIDE                                                *ultimate-autopair-guide*
------------------------------------------------------------------------------
start-here                                                 *ultimate-autopair*
This is a quick guide of the plugin, it is intended for people who just want
to use it with only a few changes.
(Note: `UA` is an abbreviation for ultimate-autopair)
The default setup is: >lua
 require'ultimate-autopair'.setup{}
< Though you can also do this: (if you later want to use multiple configs) >lua
 local ua=require'ultimate-autopair'
 local configs={ua.extend_default({})}
 ua.init(configs)
<
It is recommended to read sad through the {Q&A.md} for features.
# {Not-default-enabled-maps}
There are many features in UA which are useful but are not enabled by
default, these include:> lua
< {Space2}, which is like space, but insert space if character in match inserted >lua
 {space2={enable=true}}  --[ |] > f > [ f| ]
< {Tabout}, which allows you to tab out of parenthesis >lua
 {tabout={enable=true}} --[foo| bar] > <A-tab> > [foo bar|]
< {Close}, which allows you to close open parenthesis >lua
 {close={enable=true}} --[(| > <A-)> > [(|)]
<
# {Recommended-configs}
Here is my recommendation for a config for {fastwarp}: >lua
 {fastwarp={
    multi=true,
    {},
    {faster=true,map='<C-A-e>',cmap='<C-A-e>'},
  }}
<
# {Pair-creation}
To create a simple pair, you can just add it to the config: >lua
 {{'$','$'}}
< To change the config of a default pair, you can use: >lua
 {config_internal_pairs={{'(',')',suround=true}}}
<
Pairs may have a bunch of options, which include:
+ cmap (true): whether to enable pair in cmdline
+ imap (true): whether to enable pair in insert
+ multiline (true): whether the pair works multiline
+ p (10): the priority of the pair
{Map-specific}:
+ newline (false): enable expanding on `<CR>`
+ space (false): whether to work for space
{Extension-specific}:
+ dosuround (false): whether to surround `suround` tagged pairs
+ suround (false): tag pair as `suround`
+ fly (false): enable fly for the pair
+ ft (nil;table[string]): in filetype
+ nft (nil;table[string]): not in filetype
# {Extensions}
Extensions are things that extend default mappings. They are designed to work
for all mappings (and not just pair) which come from the default profile. Each
extension has a priority `p` which denoted in which order they should get
loaded (higher `p`=loaded earlier).
# {Profiles}
Profiles are the ones that push modules to `mem`. `mem` is a table where all
modules are stored. A module is typically a map, though in the case of
`space2` it is an autocmd.
# {Workings}
A quick summary of how the plugin works.
When initializing: the config is past to its respective profile which
generates a module, that is then put inside `mem` and then keymaps/other are
generated from `mem`.
When running: each module in `mem` is checked against the input key, and if
yes, then check will run, and if it doesn't return anything, then it continues
to the next module in `mem`.

vim:ft=help:
