*ultimate-autopair.nvim* The ultimate-autopair plugin
==============================================================================
ultimate-autopair-workings
------------------------------------------------------------------------------
pair-insertion-rules *ultimate-autopair-pair-insertion-rules*
UA uses a complex and sophisticated method to detect whether to
insert/hop pair.
Start-pair checks if there is no open end-pair.
End-pair checks if it has a corresponding start-pair and no open start-pair.
Start-ambiguous-pair checks if the number of such pairs is even.
End-ambiguous-pair checks if its inside a pair of itself.
==============================================================================
SETUP                                                *ultimate-autopair-setup*
------------------------------------------------------------------------------
setup-system                                *ultimate-autopair-setup-system*
Here are the list of functions, and table, which gets return by `require'ua'`.
`ua.setup(conf?)` clears `ua.configs`, adds `conf` to `ua.configs` and runs `ua.init()`.
`ua.configs` is a table that contains all the configs to be used.
`ua.init(confs?)` (clears and) initializes the plugin with configs from
  `ua.configs` or `confs` if `confs` is set. {NOTE}: it doesn't check for version.
`ua.clear()` clears the mappings and autocmds.
`ua.list()` list the values from mem (pairs,mappings,autocmds)
`ua.toggle()` toggle the maps/autocmds, does not delete.
`ua.disable()` disables the maps/autocmds, does not delete.
`ua.enable()` enables the maps/autocmds.
`ua.isenabled()` returns a boolean value of whether UA is enabled.
`ua.extend_default(conf)` extends `conf` with the default config.
------------------------------------------------------------------------------
config                                              *ultimate-autopair-config*
{NOTE}: if looking for the default config: |ultimate-autopair-default-config|
UA has a unique and complicated configuration system: it supports multiple
configuration at the same time, with each configuration having its own
profile. |ultimate-autopair-prof|
A config may be a table which must have a key called `profile` containing the
profile, or be a function (which internally has the profile `_function`).
==============================================================================
PROFILE                                               *ultimate-autopair-prof*
The built-in profiles are:
    default: The default pair profile |ultimate-autopair-prof-default|
    cond: Add condition to any profile |ultimate-autopair-prof-cond|
    map: Creates mappings |ultimate-autopair-prof-map|
    raw: Inserts modules directly into the system |ultimate-autopair-prof-raw|
    multi: Init a list of configs |ultimate-autopair-prof-multi|
------------------------------------------------------------------------------
prof-cond                                        *ultimate-autopair-prof-cond*
The cond profile takes a list of configs and the keys `check` and or
`filter`. If `check` is nil, `filter` is used as `check`. Inserts `check`
and `filter` into the table of configs returning modules.
Example: >lua
 table.insert(ua.configs,{
     profile='cond',
     rule=function () return vim.o.filetype=='lua' end,
     check=function (o) return not vim.startswith(o.line,'@') end,
     {profile='map',{'i','(','()<Left>'}},
     {profile='map',{'i','"','""<Left>'}},
 })
------------------------------------------------------------------------------
prof-map                                          *ultimate-autopair-prof-map*
The map profile takes a list of `{mode,lhs,rhs}` and creates mappings out of
them. {NOTE}: `mode` must be in `ua.core.modes` (`i` or `c`).
Example: >lua
 table.insert(ua.configs,{
     profile='map',
     {'i','(','()'},
     {{'i','c'},')',function(o,m) return o.linenr end,p=20},
 })
------------------------------------------------------------------------------
prof-raw                                          *ultimate-autopair-prof-raw*
The raw profile  takes a list of `modules` and directly inserts them into
the system.
Example: >lua
 table.insert(ua.configs,{
   profile='raw',
   {
     check=function(o) return o.key=='(' and not o.incmd and '()' end,
     get_map=function(mode) return mode=='i' and {'('} end,
     filter=function(o) return not o.incmd end,
     p=10,
   },
 })
<
------------------------------------------------------------------------------
prof-multi                                       *ultimate-autopair-prof-multi*
The multi profile takes a list of configs and inits them.
Example: >lua
 table.insert(ua.configs,{
     profile='multi',
     config_1,
     config_2,
 })
<
------------------------------------------------------------------------------
prof-default                                  *ultimate-autopair-prof-default*
The default profile is the default pair profile.
Options can be found at: |ultimate-autopair-default-config|
vim:ft=help:
