*ultimate-autopair.nvim* The ultimate-autopair plugin
==============================================================================
TOC
==============================================================================
CONFIG                                              *ultimate-autopair-config*
------------------------------------------------------------------------------
ultimate-autopair-config-other                *ultimate-autopair-config-other*
>lua
 {
   cmap=true, --whether to enable command mapping
   mapopt={noremap=true}, --opts for key-mappings
   _default_beg_filter=defaults.default_beg_filter,
   --the default start filter (nil to disable)
   _default_end_filter=defaults.default_end_filter,
   --the default end filter (nil to disable)
   _repconf=nil,
   --whether to not deep extend with default config
 }
<
------------------------------------------------------------------------------
ultimate-autopair-config-pair                  *ultimate-autopair-config-pair*
A pair consist of a `pair` which is the first element of the table, a `paire`
which is the second element of the table, and any number extension options.
Example: >lua
 {
   {'(',')'}, --create a pair of ()
   {'"','"'}, --create an ambiguous pair of ""
   {'{','}',rule={'not',{'instring'}}},
   --create a pair of {} with some extension options
 }
<
------------------------------------------------------------------------------
ultimate-autopair-config-extension-checker *ultimate-autopair-config-extension-checker*
To only create pairs when a particular extension is loaded, add a key-value to
the config with the extension name as the key and the list of pairs as the
value.
Example: >lua
 {
   rules=list_of_pairs --only creates pairs if the extension rules is loaded
 }
<
------------------------------------------------------------------------------
ultimate-autopair-config-filetype          *ultimate-autopair-config-filetype*
The config key `ft` is special, its a config macro which turns
`filetype=list_of_pairs` to for all list_of_pairs `{pair,ft=filetype}`
More info about filetypes can be found at |ultimate-autopair-ext-filetype|
Example: >lua
 {
   ft={
     lua={pair1,pair2}
   },
 }
< turns into >lua
 {
   filetype={
     {pair1,ft=lua},
     {pair2,ft=lua},
   }
 }
<
------------------------------------------------------------------------------
ultimate-autopair-config-backspace        *ultimate-autopair-config-backspace*
The backspace configs should be put in the `bs` config key
For more information about backspace, see |ultimate-autopair-bs|
Example: >lua
 {
   bs={
     enable=true,
     overjump=true,
     --(|foo) > bs > |foo
     space=true,
     --( |foo ) > bs > (|foo)
     multichar=true,
     --<!--|--> > bs > |
     fallback=nil,
     --can be function or string
      extensions=require('ultimate-autopair.maps.bs').default_extensions,
     --extensions used by bs
   }
 }
<
------------------------------------------------------------------------------
ultimate-autopair-config-enter                *ultimate-autopair-config-enter*
The enter configs should be put in the `cr` config key
For more information about enter, see |ultimate-autopair-cr|
Example: >lua
 {
   cr={
     enable=true,
     autoclose=true,
     --{| > cr > {^M|^M}
     multichar={
      enable=false,
      --currently only allows filetype specific pairs
       markdown={{'```','```',
        pair=true,
        --detect ```|``` instead of ```|
        noalpha=true,
        --don't search for alpha char before pair
        next=true
        --detect next pair instead of previous
        --allow you to detect things like: ```lua |```
       }},
       lua={{'then','end'},{'do','end'}},
     },
     fallback=nil,
     --can be function or string
     extensions=require('ultimate-autopair.maps.cr').default_extensions,
     --extensions used by cr
   },
 }
<
------------------------------------------------------------------------------
ultimate-autopair-config-space                *ultimate-autopair-config-space*
The space configs should be put in the `space` config key
For more information about space, see |ultimate-autopair-space|
Example: >lua
 {
   space={
     enable=true,
     fallback=nil,
     --can be function or string
   },
 }
<
------------------------------------------------------------------------------
ultimate-autopair-config-fastwarp          *ultimate-autopair-config-fastwarp*
The fastwarp configs should be put in the `fastwarp` config key
For more information about fastwarp, see |ultimate-autopair-fastwarp|
For more information about rfastwarp, see |ultimate-autopair-rfastwarp|
Example: >lua
 {
   fastwarp={
     enable=true,
     map='<A-e>',
     cmap='<A-e>',
     --set to '' to disable
     Wmap='<A-C-e>',
     --acts like WORD
     Wcmap='<A-C-e>',
     rmap='<A-E>',
     --sets the rfastwarp keybinding
     rcmap='<A-E>',
     multiline=true,
     --whether to warp multiple lines
     fallback=nil,
     --can be function or string
     extensions=require('ultimate-autopair.maps.fastwarp').default_extensions,
     endextensions=require('ultimate-autopair.maps.fastwarp').default_endextensions,
     rextensions=require('ultimate-autopair.maps.rfastwarp').default_extensions,
     rendextensions=require('ultimate-autopair.maps.rfastwarp').default_endextensions,
     --different extensions used by fastwarp/rfastwarp
   },
 }
<
------------------------------------------------------------------------------
ultimate-autopair-config-fastend            *ultimate-autopair-config-fastend*
The fastend configs should be put in the `fastend` config key
For more information about fastend, see |ultimate-autopair-fastend|
Example: >lua
 {
   fastend={
     enable=true,
     map='<A-$>',
     cmap='<A-$>',
     smart=false,
     --(|)foo, > <A-$> > (foo),
     fallback=nil,
   },
 }
<
------------------------------------------------------------------------------
ultimate-autopair-config-extensions      *ultimate-autopair-config-extensions*
The list of extensions should be put in the `extensions` config key. If an
extension requires configuration then put a table `{extension,config}` instead
of just the extension name.
Note: order is important, it is strongly advised to add the filtering
extension at the beginning and the inserting extension at the end.
Example: >lua
 {
  extensions={
    {'cmdtype',{'/','?','@'}},
    --load extension cmdtype with config {'/','?','@'}
    'multichar',
    'filetype',
    {'alpha',{before={"'"}}},
  },
 }
<
==============================================================================
OTHER-MAPPINGS                                *ultimate-autopair-other-mappings*
------------------------------------------------------------------------------
ultimate-autopair-bs                                      *ultimate-autopair-bs*
The bs mapping can do a bunch of things.
For the config, read |ultimate-autopair-config-backspace|.
Example (`*` is cursor): >
 | before   | after | config    |
 |----------+-------+-----------|
 | (*)      | *     |           |
 | ((*)     | (*)   |           |
 | (*foo)   | *foo  | overjum   |
 | ( * )    | (*)   | space     |
 | <!--*--> | *     | multichar |
<
------------------------------------------------------------------------------
ultimate-autopair-cr                                      *ultimate-autopair-cr*
The bs mapping can do a bunch of things.
For the config, read |ultimate-autopair-config-backspace|.
Example (`*` is cursor and `\t` is tab): >
 | before   | after | config            |
 |----------+-------+-------------------|
 | {*}      | {     |                   |
 |          | \t*   |                   |
 |          | }     |                   |
 |----------+-------+-------------------|
 | {*       | {     | autoclose         |
 |          | \t*   |                   |
 |          | }     |                   |
 |----------+-------+-------------------|
 | do*      | do    | multichar={       |
 |          | \t*   | ft={{'do','end'}} |
 |          | end   | }                 |
 |----------+-------+-------------------|
 | ado*     | ado   | multichar={       |
 |          | *     | ft={{'do','end'}} |
 |          |       | }                 |
 |----------+-------+-------------------|
 | ado*     | ado   | multichar={       |
 |          | \t*   | ft={{'do','end',  |
 |          | end   | noalpha=true}}}   |
 |----------+-------+-------------------|
 | <<*>>    | <<    | multichar={       |
 |          | \t*   | ft={{'<<','>>',   |
 |          | >>    | pair=true}}}      |
 |----------+-------+-------------------|
 | <<foo*>> | <<foo | multichar={       |
 |          | \t*   | ft={{'<<','>>',   |
 |          | >>    | next=true}}}      |
<
------------------------------------------------------------------------------
ultimate-autopair-space                                *ultimate-autopair-space*
The space mapping can do a bunch of things.
For the config, read |ultimate-autopair-config-space|.
Example (`*` is cursor): >
 | before | after    | config |
 |--------+----------+--------|
 | (*)    | ( * )    |        |
 | ( * )  | (  *  )  |        |
 | (*foo) | ( *foo ) |        |
<
------------------------------------------------------------------------------
ultimate-autopair-fastwarp                        *ultimate-autopair-fastwarp*
The fastwarp mapping can do a bunch of things.
For the config, read |ultimate-autopair-config-fastwarp|.
Example (`*` is cursor): >
 | before     | after      |
 |------------+------------+
 | (*){}      | ({}*)      |
 | (*){foo}   | ({foo}*)   |
 | ()foo      | (foo*)     |
 | (foo*),bar | (foo,bar*) |
<
------------------------------------------------------------------------------
ultimate-autopair-rfastwarp                        *ultimate-autopair-rfastwarp*
The rfastwarp mapping can do a bunch of things.
For the config, read |ultimate-autopair-config-fastwarp|.
Is designed to do the reverse of fastwarp.
------------------------------------------------------------------------------
ultimate-autopair-rfastwarp                        *ultimate-autopair-fastend*
The fastend mapping can do one thing.
For the config, read |ultimate-autopair-config-fastend|.
It will place the parens onaa the end of line.
==============================================================================
EXTENSIONS                                        *ultimate-autopair-extensions*
All extensions should be in the `lua/ultimate_autopair_extensions` directory.
------------------------------------------------------------------------------
ultimate-autopair-ext-alpha                      *ultimate-autopair-ext-alpha*
Extension config: {before,after,no_python}
Extension requirement: `o.type` in {1,3}
If `o.key` in `conf.after` or `conf.after` is bool true and next character is
alpha then escape. If `o.key` in `conf.before` or `conf.before` is bool true
and previous character is alpha then escape. Spesial case in python
f-string/other, can be disabled with `conf.no_python`
------------------------------------------------------------------------------
ultimate-autopair-ext-cmdtype                  *ultimate-autopair-ext-cmdtype*
Extension config: {list_of_cmdtypes...}
Example: >lua
 {'/','?','@'}
<
If the cmdtype in `conf` then escape.
------------------------------------------------------------------------------
ultimate-autopair-ext-escape                    *ultimate-autopair-ext-escape*
Extension requirement: length `o.key` == 1
If the previous number of `\\` is odd then escape.
Also filters escaped parentheses if option `filter` is true.
------------------------------------------------------------------------------
ultimate-autopair-ext-filetype                *ultimate-autopair-ext-filetype*
Note: filetype extension is sometimes needed for other extensions.
The extension uses the `ft` key in each pair for its `mem`.
Example: >lua
 {'(',')',ft='lua'}
<
Note that `ft` can't be a table! If multiple filetypes are to be defined, then
multiple pairs needs to be defined or |ultimate-autopair-config-filetype|.
------------------------------------------------------------------------------
ultimate-autopair-ext-fly                          *ultimate-autopair-ext-fly*
Extension config: {list_of_characters...,match,nofilter}
Extension requirement: `o.type` == 2
Extension requirement: length `o.key` == 1
`match` alternative to list_of_characters, uses match.
`nofilter` disable filtering.
Hops over all `conf` characters if the pairs are balanced.
Example (`*` is cursor): >
 | before   | key | after    | config            |
 |----------+-----+----------+-------------------|
 | ({[*] }) | )   | ({[] })* | {'}',')',']',' '} |
<
------------------------------------------------------------------------------
ultimate-autopair-ext-indentblock          *ultimate-autopair-ext-indentblock*
Currently disabled...
Replacing the line with a block spaning current indentation.
------------------------------------------------------------------------------
ultimate-autopair-ext-multichar              *ultimate-autopair-ext-multichar*
Optional dependencys: rules, filetype, alpha
Suport for multichar pairs.
------------------------------------------------------------------------------
ultimate-autopair-ext-rules                      *ultimate-autopair-ext-rules*
Note: there are plans of doing breaking changes to extension.
The extension uses the `rule` key in each pair for its `mem`. Whene runing the
extension, the `mem` will be run as a expr with an `or` caller.
The rules extension allows for defining complex rules. The extension uses
tables like lisp, example: `{'not',{'instring'}}`
List of simple functions: >
 | function | arguments  | description                             | example                    |
 |----------+------------+-----------------------------------------+----------------------------|
 | next     | char ?num  | checks if {char} at {num} after cursor  | {'next','/',2}             |
 | previous | char ?num  | checks if {char} at {num} before cursor | {'previous','+'}           |
 | filetype | *filetypes | checks if filetype in {filetypes}       | {'filetype',{'lua'}}       |
 | call     | func *args | runs lua function {f} with args {args}  | {'call',vim.fn.pumvisible} |
 | instring |            | checks if inside string                 | {'instring'}               |
 | not      | expr       | returns not of what expression returns  | {'not',{...}}              |
 | and      | *expr      | ands all expressions                    | {'and',{...},{...}}        |
 | or       | *expr      | ors all expressions                     | {'or',{...},{...}}         |
 <
List of complex functions:
`rules.when`
Args: `*(cond expr) elseexpr?`
Works like `if {cond} {expr} elseif ... end`. If {elseexpr} is not given (there's an even number of arguments) then return true.
Example: >lua
 {'when',{'filetype','lisp'},{'not',{'instring'}}}
<
------------------------------------------------------------------------------
ultimate-autopair-ext-string                    *ultimate-autopair-ext-string*
Extension requirement: length `o.key` == 1
Extension config: {list_of_configs}
The extension takes one config key, `notree`, which disables treesitter.
The extension filters inside and outside of strings, has treesitter suport.
Example (`*` is cursor): >
 | ingoing | outgoing |
 |---------+----------|
 | a'b'c*  | a\1c*    |
 | a'b*'c  | 'c*'     |
<
------------------------------------------------------------------------------
ultimate-autopair-ext-suround                  *ultimate-autopair-ext-suround*
Extension requirement: `o.type` == 1
Extension config: {list_of_ambiguous_pairs_to_surround}
Whene cursor is before a ambiguous pair defined, then suround the pair.
Example (`*` is cursor): >
 | before | key | after  |
 |--------+-----+--------|
 | *'a'   | (   | (*'a') |
<
------------------------------------------------------------------------------
ultimate-autopair-ext-treenode                *ultimate-autopair-ext-treenode*
Filters inside and outside of treesitter nodes.
`inside` gives which treeitter nodes should be isolated
`outside` gives which treeitter nodes should be filterd
Example (`*` is cursor and `=` is deleted): >
 | before    | after     | config                |
 |-----------+-----------+-----------------------|
 | foo #*bar | #*bar     | {inside={'comment'}}  |
 | foo* #bar | foo* ==== | {outside={'comment'}} |
<
==============================================================================
DEFAULT-SYSTEMS                            *ultimate-autopair-add-pair-system*
------------------------------------------------------------------------------
ultimate-autopair-default-add-pair        *ultimate-autopair-default-add-pair*
Note this is actually an api and not a default-system, but as this api feels
like a default-system, so I decided to add a version to default-system.
`addpair.pair`
The `default_beg_filter` calls `addpair.pair`. `addpair.pair` is a function
that runs the corresponding `addpair.pair*` depending on type.
`addpair.pairs`
For type 1 pair (`(`), adds the corresponding paire (`)`) if there are not
open paires (`)`) after the cursor.
Examples:
`|`  > `(` > `(|)`
`|)` > `(` > `(|)`
`addpair.paire`
For type 2 pair (`)`), if the next character is the pair (`)`) and there are
no open pairs (`(`) before the cursor, then hop over the pair, otherwise
insert the pair. (Read |ultimate-autopair-ext-fly| for special behavior.)
Examples:
`(|)`  > `)` > `()|`
`((|)` > `)` > `(()|)`
`addpair.paira`
For type 3 pair (`"`), if the apairs (`"`) are not balanced then insert the
individual pair, else if next character is the pair (`"`) and inside the pair
(there's an open apair (`"`) on the left and right of the cursor) then hop over
the pair, otherwise insert the pair.
(Read |ultimate-autopair-ext-string| for weird behavior.)
Examples:
`|`   > `"` > `"|"`
`"|`  > `"` > `""|`
`"|"` > `"` > `""|`
`|""` > `"` > `""|""`
------------------------------------------------------------------------------
ultimate-autopair-default-start-filter *ultimate-autopair-default-start-filter*
Initialize the values for the `o` variable >lua
 extra
 line
 wline
 col
 wcol
 linenr
 cmdmode
 if gmem[o.key]then
   pair
   paire
   type
 end
<
------------------------------------------------------------------------------
ultimate-autopair-default-end-filter    *ultimate-autopair-default-end-filter*
If `o.key` is in `mem` then `addpair.pair` is called, else default behavior.
==============================================================================
OBJECTS                                            *ultimate-autopair-objects*
Todo: write documentation
==============================================================================
API                                                    *ultimate-autopair-api*
Todo: write documentation
==============================================================================
WRITING-EXTENSIONS                      *ultimate-autopair-writing-extensions*
Todo: write documentation

vim:ft=help:
